services:
  postgres:
    image: postgres:17.0
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    extra_hosts:
      - local.hasura.dev:host-gateway
    environment:
      POSTGRES_PASSWORD: postgrespassword

  graphql-engine:
    image: hasura/graphql-engine:v2.44.0.cli-migrations-v3
    ports:
      - "8081:8080"
    restart: always
    depends_on:
      postgres:
        required: true
        condition: service_started
    volumes:
      - ./services/graphql-engine/migrations:/hasura-migrations
      - ./services/graphql-engine/metadata:/hasura-metadata
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      DATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: randomsecret

  graphql-engine-replica:
    image: hasura/graphql-engine:v2.44.0
    ports:
      - "8080"
    restart: always
    depends_on:
      postgres:
        required: true
        condition: service_started
    volumes:
      - ./services/graphql-engine/migrations:/hasura-migrations
      - ./services/graphql-engine/metadata:/hasura-metadata
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      DATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: randomsecret

  loki:
    image: grafana/loki:3.2.0
    command: "-config.file=/etc/loki/config.yaml"
    ports:
      - "3131:3100"
      - 7946
      - 9095
    volumes:
      - ./services/loki/loki-config.yaml:/etc/loki/config.yaml
    extra_hosts:
      - local.hasura.dev:host-gateway
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./services/loki/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345

  gateway:
    image: nginx:latest
    depends_on:
      - loki
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    entrypoint:
      - sh
      - -euc
      - |
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    extra_hosts:
      - local.hasura.dev:host-gateway
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  node-exporter:
    image: prom/node-exporter:v1.8.2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9100"
    restart: always

  prometheus:
    image: prom/prometheus:v2.55.1
    volumes:
      - ./services/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - 9090:9090
    extra_hosts:
      - local.hasura.dev:host-gateway
    restart: always

  jaeger:
    image: jaegertracing/all-in-one:1.60
    restart: always
    ports:
      - 16686:16686
    environment:
      COLLECTOR_OTLP_ENABLED: "true"

volumes:
  grafana_data: {}
  postgres_data: {}
  prometheus_data: {}
